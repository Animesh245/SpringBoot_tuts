<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.Animesh245</groupId>
        <artifactId>parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
<!--        <relativePath>../pom.xml</relativePath> &lt;!&ndash; lookup parent from repository &ndash;&gt;-->
    </parent>

    <artifactId>frontend</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>frontend</name>
    <description>frontend module</description>

    <build>
        <plugins>
            <plugin>
                <groupId>com.github.eirslett</groupId>
                <artifactId>frontend-maven-plugin</artifactId>
                <version>1.3</version>

                <configuration>
                    <nodeVersion>v16.16.0</nodeVersion>
                    <npmVersion>8.11.0</npmVersion>
<!--                    the app will be built in this directory-->
                    <workingDirectory>src/main/frontend</workingDirectory>
                </configuration>

                <executions>
<!--                     The first execution downloads and installs node
                            and npm to the directories node and node_modules.-->
                    <execution>
                        <id>install node and npm</id>
                        <goals>
                            <goal>install-node-and-npm</goal>
                        </goals>
                    </execution>

<!--                    The second execution runs npm install in the working directory
                        to download all npm dependencies of our project.-->
                    <execution>
                        <id>npm install</id>
                        <goals>
                            <goal>npm</goal>
                        </goals>
                    </execution>

<!--                    The third execution runs npm run build in the working directory
                        to build the Angular2 application. By default, angular-cli will
                        write the final Angular2 application in the src/main/frontend/dist directory.
                        We can adhere to the Maven standard directory layout better by configuring angular-cli
                        to write it to the target directory. This will also delete the built application,
                        along with all other build artifacts, when we run mvn clean. Edit .angular-cli.json
                        and change the outDir in the apps section.-->
                    <execution>
                        <id>npm run build</id>
                        <goals>
                            <goal>npm</goal>
                        </goals>

                        <configuration>
                            <arguments>run build</arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>

<!--        it will create the allow the frontend folder to be created in parent app target folder.
            Maven will now build (and clean) the Angular2 application, but it will not end up in our final jar.
             Spring Boot will serve static content from a number of directories on the Java classpath.
             So we have to make sure that the Angular2 application ends up in one of those directories.
             Files on the classpath that are not Java classes, are known as resources.
             Maven copies all resources (normally found in src\main\resources) into the final jar.
             Add the packaged Angular2 application to the resources by adding the snippet below to the
             build section in pom.xml. The given targetPath will put it in /static on the classpath and Spring Boot will serve it from there.-->
        <resources>
            <resource>
                <directory>target/frontend</directory>
                <targetPath>static</targetPath>
            </resource>
        </resources>
    </build>
</project>
